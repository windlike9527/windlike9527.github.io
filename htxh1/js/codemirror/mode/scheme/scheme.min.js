// CodeMirror, copyright (c) by Marijn Haverbeke and others
// Distributed under an MIT license: https://codemirror.net/5/LICENSE

/**
 * Author: Koh Zi Han, based on implementation by Koh Zi Chun
 * Improved by: Jakub T. Jankiewicz
 */
(function(e){"object"==typeof exports&&"object"==typeof module?e(require("../../lib/codemirror")):"function"==typeof define&&define.amd?define(["../../lib/codemirror"],e):e(CodeMirror)})(function(e){e.defineMode("scheme",function(){function e(a){var b={};a=a.split(" ");for(var c=0;c<a.length;++c)b[a[c]]=!0;return b}function g(a,b,c){this.indent=a;this.type=b;this.prev=c}function m(a){return a.match(n)}function p(a){return a.match(q)}function h(a,b){!0===b&&a.backUp(1);return a.match(r)}function t(a){return a.match(u)}function k(a,b){for(var c,d=!1;null!=(c=a.next());){if(c==b.token&&!d){b.state.mode=!1;break}d=!d&&"\\"==c}}var l=e("\u03bb case-lambda call/cc class cond-expand define-class define-values exit-handler field import inherit init-field interface let*-values let-values let/ec mixin opt-lambda override protect provide public rename require require-for-syntax syntax syntax-case syntax-error unit/sig unless when with-syntax and begin call-with-current-continuation call-with-input-file call-with-output-file case cond define define-syntax define-macro defmacro delay do dynamic-wind else for-each if lambda let let* let-syntax letrec letrec-syntax map or syntax-rules abs acos angle append apply asin assoc assq assv atan boolean? caar cadr call-with-input-file call-with-output-file call-with-values car cdddar cddddr cdr ceiling char-\x3einteger char-alphabetic? char-ci\x3c\x3d? char-ci\x3c? char-ci\x3d? char-ci\x3e\x3d? char-ci\x3e? char-downcase char-lower-case? char-numeric? char-ready? char-upcase char-upper-case? char-whitespace? char\x3c\x3d? char\x3c? char\x3d? char\x3e\x3d? char\x3e? char? close-input-port close-output-port complex? cons cos current-input-port current-output-port denominator display eof-object? eq? equal? eqv? eval even? exact-\x3einexact exact? exp expt #f floor force gcd imag-part inexact-\x3eexact inexact? input-port? integer-\x3echar integer? interaction-environment lcm length list list-\x3estring list-\x3evector list-ref list-tail list? load log magnitude make-polar make-rectangular make-string make-vector max member memq memv min modulo negative? newline not null-environment null? number-\x3estring number? numerator odd? open-input-file open-output-file output-port? pair? peek-char port? positive? procedure? quasiquote quote quotient rational? rationalize read read-char real-part real? remainder reverse round scheme-report-environment set! set-car! set-cdr! sin sqrt string string-\x3elist string-\x3enumber string-\x3esymbol string-append string-ci\x3c\x3d? string-ci\x3c? string-ci\x3d? string-ci\x3e\x3d? string-ci\x3e? string-copy string-fill! string-length string-ref string-set! string\x3c\x3d? string\x3c? string\x3d? string\x3e\x3d? string\x3e? string? substring symbol-\x3estring symbol? #t tan transcript-off transcript-on truncate values vector vector-\x3elist vector-fill! vector-length vector-ref vector-set! with-input-from-file with-output-to-file write write-char zero?"),v=e("define let letrec let* lambda define-macro defmacro let-syntax letrec-syntax let-values let*-values define-syntax syntax-rules define-values when unless"),n=new RegExp(/^(?:[-+]i|[-+][01]+#*(?:\/[01]+#*)?i|[-+]?[01]+#*(?:\/[01]+#*)?@[-+]?[01]+#*(?:\/[01]+#*)?|[-+]?[01]+#*(?:\/[01]+#*)?[-+](?:[01]+#*(?:\/[01]+#*)?)?i|[-+]?[01]+#*(?:\/[01]+#*)?)(?=[()\s;"]|$)/i),q=new RegExp(/^(?:[-+]i|[-+][0-7]+#*(?:\/[0-7]+#*)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?@[-+]?[0-7]+#*(?:\/[0-7]+#*)?|[-+]?[0-7]+#*(?:\/[0-7]+#*)?[-+](?:[0-7]+#*(?:\/[0-7]+#*)?)?i|[-+]?[0-7]+#*(?:\/[0-7]+#*)?)(?=[()\s;"]|$)/i),u=new RegExp(/^(?:[-+]i|[-+][\da-f]+#*(?:\/[\da-f]+#*)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?@[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?[-+](?:[\da-f]+#*(?:\/[\da-f]+#*)?)?i|[-+]?[\da-f]+#*(?:\/[\da-f]+#*)?)(?=[()\s;"]|$)/i),r=new RegExp(/^(?:[-+]i|[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)i|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)@[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)|[-+]?(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)[-+](?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*)?i|(?:(?:(?:\d+#+\.?#*|\d+\.\d*#*|\.\d+#*|\d+)(?:[esfdl][-+]?\d+)?)|\d+#*\/\d+#*))(?=[()\s;"]|$)/i);return{startState:function(){return{indentStack:null,indentation:0,mode:!1,sExprComment:!1,sExprQuote:!1}},token:function(a,b){null==b.indentStack&&a.sol()&&(b.indentation=a.indentation());if(a.eatSpace())return null;var c=null;switch(b.mode){case "string":k(a,{token:'"',state:b});c="string";break;case "symbol":k(a,{token:"|",state:b});c="symbol";break;case "comment":for(var d,c=!1;null!=(d=a.next());){if("#"==d&&c){b.mode=!1;break}c="|"==d}c="comment";break;case "s-expr-comment":if(b.mode=!1,"("==a.peek()||"["==a.peek())b.sExprComment=0;else{a.eatWhile(/[^\s\(\)\[\]]/);c="comment";break}default:if(d=a.next(),'"'==d)c=b.mode="string";else if("'"==d)"("==a.peek()||"["==a.peek()?"number"!=typeof b.sExprQuote&&(b.sExprQuote=0):a.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/),c="atom";else if("|"==d)c=b.mode="symbol";else if("#"==d)if(a.eat("|"))c=b.mode="comment";else if(a.eat(/[tf]/i))c="atom";else if(a.eat(";"))b.mode="s-expr-comment",c="comment";else{d=null;var e=!1,f=!0;a.eat(/[ei]/i)?e=!0:a.backUp(1);a.match(/^#b/i)?d=m:a.match(/^#o/i)?d=p:a.match(/^#x/i)?d=t:a.match(/^#d/i)?d=h:a.match(/^[-+0-9.]/,!1)?(f=!1,d=h):e||a.eat("#");null!=d&&(f&&!e&&a.match(/^#[ei]/i),d(a)&&(c="number"))}else if(/^[-+0-9.]/.test(d)&&h(a,!0))c="number";else if(";"==d)a.skipToEnd(),c="comment";else if("("==d||"["==d){c="";for(e=a.column();null!=(f=a.eat(/[^\s\(\[\;\)\]]/));)c+=f;0<c.length&&v.propertyIsEnumerable(c)?b.indentStack=new g(e+2,d,b.indentStack):(a.eatSpace(),a.eol()||";"==a.peek()?b.indentStack=new g(e+1,d,b.indentStack):(c=e+a.current().length,b.indentStack=new g(c,d,b.indentStack)));a.backUp(a.current().length-1);"number"==typeof b.sExprComment&&b.sExprComment++;"number"==typeof b.sExprQuote&&b.sExprQuote++;c="bracket"}else")"==d||"]"==d?(c="bracket",null!=b.indentStack&&b.indentStack.type==(")"==d?"(":"[")&&(b.indentStack=b.indentStack.prev,"number"==typeof b.sExprComment&&0==--b.sExprComment&&(c="comment",b.sExprComment=!1),"number"==typeof b.sExprQuote&&0==--b.sExprQuote&&(c="atom",b.sExprQuote=!1))):(a.eatWhile(/[\w_\-!$%&*+\.\/:<=>?@\^~]/),c=l&&l.propertyIsEnumerable(a.current())?"builtin":"variable")}return"number"==typeof b.sExprComment?"comment":"number"==typeof b.sExprQuote?"atom":c},indent:function(a){return null==a.indentStack?a.indentation:a.indentStack.indent},fold:"brace-paren",closeBrackets:{pairs:'()[]{}""'},lineComment:";;"}});e.defineMIME("text/x-scheme","scheme")});